name: Java CI with Gradle

on:
  pull_request:
    branches: [ "main" ]
  push:
    branches: [ "tmp/ci" ]
    
env:
  ROLE_ASSUME: ${{ secrets.AWS_ROLE_TO_ASSUME }}
  REGION: ${{ vars.AWS_REGION }}
  ECR_REPOSITORY: ${{ vars.ECR_REPOSITORY }}

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write

    steps:
      - uses: actions/checkout@v4 # Clone the repository

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Setup Gradle
        uses: gradle/gradle-build-action@v2

      - name: Cache Gradle packages
        uses: actions/cache@v3
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Build with Gradle Wrapper
        run: ./gradlew build -x test

      - name: Verify build output
        run: ls -la build/libs

      - name: Configure AWS Credentials for region audience
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ vars.AWS_REGION }}
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
        with:
          mask-password: 'false'

      - name: Get image tag (version)
        id: image
        run: |
          VERSION=$(echo ${{ github.sha }} | cut -c1-8)
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "IMAGE_TAG=$VERSION" >> $GITHUB_ENV  # Ensure IMAGE_TAG is set

      - name: Build, tag, and push image to Amazon ECR
        id: image-info
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ vars.ECR_REPOSITORY }}
          IMAGE_TAG: ${{ env.IMAGE_TAG }}
        run: |
          echo "ECR Registry: $ECR_REGISTRY"
          echo "ECR Repository: $ECR_REPOSITORY"
          echo "Image Tag: $IMAGE_TAG"
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

      - name: Update Helm chart
        env:
          GITHUB_TOKEN: ${{ secrets.REPO_TOKEN }}
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ vars.ECR_REPOSITORY }}
          IMAGE_TAG: ${{ env.IMAGE_TAG }}
        run: |
          git config --global user.name ${{ vars.GIT_USER }}
          git config --global user.email ${{ vars.GIT_EMAIL }}
          git clone https://x-access-token:${GITHUB_TOKEN}@github.com/${{ vars.GIT_USER_OR_ORG }}/${{ vars.GIT_REPO_NAME }}.git
          cd ${{ vars.GIT_REPO_NAME }}
          echo "Updating Helm chart with the following values:"
          echo "Registry: $ECR_REGISTRY"
          echo "Repository: $ECR_REPOSITORY"
          echo "Image Tag: $IMAGE_TAG"
          yq e '.image.repository = env(ECR_REGISTRY) + "/" + env(ECR_REPOSITORY) | .image.tag = env(IMAGE_TAG)' -i ${{ vars.APP_NAME }}/values.yaml
          git add .
          git commit -m "Update image to $IMAGE_TAG"
          git push
